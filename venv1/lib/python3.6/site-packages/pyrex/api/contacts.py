from typing import List

from .base import BaseApi, BaseModel, rex_result

from .notes import NotesApi


class ContactEmail(BaseModel):
    def __init__(self, email, description=None, primary=False):
        self.description = description
        self.primary = primary
        self.email = email

    def rex_format(self):
        return {
            "email_desc": self.description,
            "email_primary": int(self.primary),
            "email_address": self.email,
        }


class ContactPhone(BaseModel):
    def __init__(self, number, phone_type="default", primary=False):
        self.number = number
        self.phone_type = phone_type
        self.primary = primary

    def rex_format(self):
        return {
            "phone_type": self.phone_type,
            "phone_primary": int(self.primary),
            "phone_number": self.number,
        }


class ContactName(BaseModel):
    def __init__(self, first_name=None, last_name=None, title=None):
        self.first_name = first_name
        self.last_name = last_name
        self.title = title

    @property
    def legal_name(self):
        return f"{self.first_name} {self.last_name}"

    def rex_format(self):
        return {
            "name_first": self.first_name,
            "name_last": self.last_name,
            "name_title": self.title,
        }


class ContactRelationship(BaseModel):
    def __init__(self, related_contact_id, relation_type):
        self.related_contact_id = related_contact_id
        self.relation_type = relation_type

    def rex_format(self):
        return {
            "related_contact_id": self.related_contact_id,
            "text": self.relation_type,
            "relationship_type": {
                "id": self.relation_type,
                "_value": {
                    "id": self.relation_type,
                    "label": self.relation_type,
                    "value": self.relation_type,
                    "term": self.relation_type,
                },
            },
        }


class Contact(BaseModel):
    def __init__(
        self,
        name: ContactName,
        address: str = None,
        email: ContactEmail = None,
        phone: ContactPhone = None,
        relationship: ContactRelationship = None,
    ):

        self.emails = []
        self.names = []
        self.phones = []
        self.relationships = []
        self.address = None
        self.legal_name = None

        self.add_name(name)

        if email:
            self.add_email(email)
        if phone:
            self.add_phone(phone)
        if relationship:
            self.add_relationship(relationship)

        self.address = address
        self.legal_name = name.legal_name

    def add_name(self, name: ContactName):
        assert isinstance(name, ContactName)
        self.names.append(name)

    def add_email(self, email: ContactEmail):
        assert isinstance(email, ContactEmail)
        self.emails.append(email)

    def add_relationship(self, relationship: ContactRelationship):
        assert isinstance(relationship, ContactRelationship)
        self.relationships.append(relationship)

    def add_phone(self, phone: ContactPhone):
        assert isinstance(phone, ContactPhone)
        self.phones.append(phone)

    def rex_format(self):
        emails = [email.rex_format() for email in self.emails]
        names = [name.rex_format() for name in self.names]
        phones = [phone.rex_format() for phone in self.phones]
        relationships = [r.rex_format() for r in self.relationships]

        return {
            "data": {
                "type": "person",
                "address": self.address,
                "name_legal": self.legal_name,
                "_related": {
                    "contact_emails": emails,
                    "contact_names": names,
                    "contact_phones": phones,
                    "contact_relationships": relationships,
                },
            }
        }


class ContactsApi(BaseApi):

    def __init__(self, client):
        self.notes_api = NotesApi(client)
        super().__init__(client)

    @rex_result()
    def get(self, contact_id: int, raw=False, execute=True):
        data = {'id': int(contact_id)}
        return ('Contacts::read', data)

    @rex_result()
    def create(self, contact: Contact, raw=False, execute=True):
        return ('Contacts::create', contact.rex_format())

    @rex_result()
    def link_property(self, contact_id: int, property_id: int, relation: str = 'owner', raw=False, execute=True):
        data = {
            "data": {
                "_id": contact_id,
                "_related": {
                    "contact_reln_property": [
                        {"property": {"id": property_id},
                            "reln_type": {"id": relation}}
                    ]
                },
            },
            "fields": ["_related.contact_reln_property"],
        }

        return ('Contacts::update', data)

    @rex_result()
    def transfer_ownership(self, contact_id: int, owner_id: int, raw=False, execute=True):
        data = {
            "object_type": "contacts",
            "object_id": contact_id,
            "new_owner_id": owner_id,
        }
        return ('SecurityObjectPermissions::transferObjectOwnershipToUser', data)

    @rex_result()
    def recover(self, contact_id: int, raw=False, execute=True):
        data = {'id': contact_id}
        return ('Contacts::recoverFromTrash', data)

    @rex_result()
    def delete(self, contact_id: int, execute=True):
        data = {'id': contact_id}
        return ('Contacts::trash', data)

    @rex_result()
    def add_tags(self, contact_id: int, tags: List[str], raw=False, execute=True):
        contact = self.get(contact_id)
        contact_tags = [t["tag"] for t in contact["_related"]["contact_tags"]]

        new_tags = [{"tag": t} for t in set(tags) - set(contact_tags)]

        if not new_tags:
            return

        data = {
            "data": {"_id": contact_id, "_related": {"contact_tags": new_tags}},
            "fields": ["_related.contact_tags"],
        }

        return ('Contacts::update', data)

    @rex_result()
    def get_notes(self, contact_id, raw=False, execute=True):
        return self.notes_api.get('Contacts', contact_id, raw=True, execute=False)

    @rex_result()
    def create_contact_note(self, contact_id, note, updated_last_contacted=True,
                            raw=False, execute=True):

        return self.notes_api.create(
            "contact",
            contact_id,
            note,
            updated_last_contacted=updated_last_contacted,
            raw=True,
            execute=False
        )

    @rex_result()
    def find_possible_duplicate(
        self, contact_type, name_first, email, phone, name_last=None
    ):
        data = {
            "name_first": name_first,
            "name_last": name_last,
            "email": email,
            "phone": phone,
        }
        if contact_type == "company":
            del data["name_first"]
            del data["name_last"]
            data["company_name"] = name_first
        return self.client.request_beta("Contacts::findPossibleDuplicates", data)

    @rex_result()
    def update_contact(
        self, contact_id, new_contact_number, new_email, name_first, name_last=None
    ):
        """
        updates existing contact's number,email and name by providing contact_id(type:int),
        new_contact_number(type:int),new_email(type:string),name_first(type:string),
        name_last(type:string)
        """
        contact = self.get(contact_id)
        ret_val = self.update_contact_name(contact, name_first, name_last)
        if ret_val != None:
            contact = self.get(contact_id)
        if len(contact["_related"]["contact_phones"]) > 0:
            contact["_related"]["contact_phones"][0][
                "phone_number"
            ] = new_contact_number
            contact["_related"]["contact_phones"][0]["edited"] = True
        else:
            contact["_related"]["contact_phones"] = [
                {"phone_number": new_contact_number, "edited": False}
            ]

        if len(contact["_related"]["contact_emails"]) > 0:
            contact["_related"]["contact_emails"][0]["email_address"] = new_email
            contact["_related"]["contact_emails"][0]["edited"] = True
        else:
            contact["_related"]["contact_emails"] = [
                {"email_address": new_email, "edited": False}
            ]

        data = {
            "service_name": "Contacts",
            "_id": contact_id,
            "service_object_id": contact_id,
            "data": contact,
            "value_map": {},
            "return_custom_fields_keyed_by": "field_id",
        }
        return self.client.request_beta(
            "CustomFields::setFieldValuesAndUpdateRecord", data
        )

    def update_contact_name(self, contact, name_first, name_last=None):
        """
        updates existing contact's name by providing contact_id(type:int)
        name_first(type:string),name_last(type:string)
        """
        modify_flag = False
        data = {"data": {"_id": contact["_id"]}}

        if contact["type"] == "person":
            existing_first_name = contact["_related"]["contact_names"][0]["name_first"]
            existing_last_name = contact["_related"]["contact_names"][0]["name_last"]

            if existing_first_name != None or existing_last_name != None:
                if existing_first_name != name_first or existing_last_name != name_last:
                    data["data"]["_related"] = {
                        "contact_names": [
                            {
                                "_id": contact["_related"]["contact_names"][0]["_id"],
                                "name_first": name_first,
                                "name_last": name_last,
                            }
                        ]
                    }
                    modify_flag = True
        else:
            existing_first_name = contact["company_name"]
            if existing_first_name != None:
                if contact["company_name"] != name_first:
                    data["data"]["company_name"] = name_first
                    modify_flag = True

        if modify_flag == True:
            return self.client.request_beta("Contacts::update", data)
        return None
