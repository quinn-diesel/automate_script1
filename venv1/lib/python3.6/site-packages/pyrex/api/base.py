
import inspect
from abc import ABC, abstractmethod


class BaseModel:

    def __eq__(self, other):
        if type(other) is type(self):
            return self.__dict__ == other.__dict__
        return False

    @abstractmethod
    def rex_format(self):
        pass


class BaseApi:

    def __init__(self, client):
        self.client = client


def _get_default_args(func):
    signature = inspect.signature(func)
    return {
        k: v.default
        for k, v in signature.parameters.items()
        if v.default is not inspect.Parameter.empty
    }


class rex_result(object):
    """Decorator to get result from rex api return"""

    def __init__(self, return_key=None):
        self.return_key = return_key

    def result(self, result, raw):
        if result is None or raw:
            return result
        else:
            r = result.get('result')
            if self.return_key:
                return r[self.return_key]
            elif isinstance(r, dict):
                if 'rows' in r:
                    return r['rows']
            return r

    def __call__(self, f):

        defaults = _get_default_args(f)

        def wrapped_f(api, *args, **kwargs):

            used_kwargs = defaults.copy()
            used_kwargs.update(kwargs)

            result = f(api, *args, **kwargs)

            if result:
                if used_kwargs.get('execute'):
                    return self.result(api.client.request(*result), used_kwargs.get('raw', False))
                elif 'execute' in used_kwargs:
                    return result
                else:
                    return self.result(result, used_kwargs.get('raw', False))
        return wrapped_f
