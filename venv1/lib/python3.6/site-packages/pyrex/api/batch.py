from .base import BaseApi, rex_result


class BatchApi(BaseApi):

    @rex_result()
    def execute(self, functions):
        if isinstance(functions, list):
            requests = [{'method': method, 'args': data}
                        for method, data in [fn(*args, execute=False) for fn, args in functions]]

        elif isinstance(functions, dict):
            requests = {key: {'method': method, 'args': data}
                        for key, (method, data) in [(key, fn(*args, execute=False))
                                                    for key, (fn, args) in functions.items()]}
        else:
            raise ValueError(
                'BatchApi requests should be either a dict or a list')

        return self.client.request('BatchRequests::execute',
                                   {'requests': requests})
