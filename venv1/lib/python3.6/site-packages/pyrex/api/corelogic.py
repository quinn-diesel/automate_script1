from .base import BaseApi, BaseModel, rex_result


class CorelogicApi(BaseApi):

    def __init__(self, client):
        self.connection_ids = {}
        super().__init__(client)

    def get_third_party_connection_id(self, service_type):
        results = self.get_third_party_connections()
        for result in results:
            if result['service_type_id'] == service_type:
                self.connection_ids[service_type] = result['id']
                return result['id']
        return None

    @rex_result()
    def get_third_party_connections(self, raw=False):
        data = {'connection_state': 'connected'}
        return self.client.request('ThirdPartyServices::getConnections', data)

    @rex_result(return_key='remote_details')
    def get_corelogic_property_details(self, property_id, raw=False):
        id_ = self.connection_ids.get('corelogic')
        if not id_:
            id_ = self.get_third_party_connection_id('corelogic')
            if not id_:
                return None
        data = {'connection_id': id_, 'local_property_id': property_id}
        result = self.client.request(
            'ThirdPartyServiceCoreLogicProperty::getPropertyDetails', data
        )
        return result

    @rex_result()
    def get_corelogic_property_id_from_address(self, address, raw=False):
        id_ = self.connection_ids.get('corelogic')
        if not id_:
            id_ = self.get_third_party_connection_id('corelogic')
            if not id_:
                return None
        data = {
            'connection_id': id_,
            'suggestion': address,
            'search_type': 'exact_address',
        }
        return self.client.request(
            'ThirdPartyServiceCoreLogicSearch::getPropertyIdsFromSuggestion', data
        )

    @rex_result()
    def get_corelogic_deeplink(self, property_id, raw=False):
        id_ = self.connection_ids.get('corelogic')
        if not id_:
            id_ = self.get_third_party_connection_id('corelogic')
            if not id_:
                return None
        data = {
            'connection_id': id_,
            'local_property_id': property_id,
            'type': 'property',
        }
        return self.client.request(
            'ThirdPartyServiceCoreLogicProperty::getDeepLink', data)

    @rex_result()
    def connect_corelogic_to_property(self, property_id, cl_id, raw=False):
        id_ = self.connection_ids.get('corelogic')
        if not id_:
            id_ = self.get_third_party_connection_id('corelogic')
            if not id_:
                return None
        data = {
            'connection_id': id_,
            'local_property_id': property_id,
            'remote_property_id': cl_id,
        }
        return self.client.request(
            'ThirdPartyServiceCoreLogicProperty::setPropertyRemoteId', data
        )

    @rex_result()
    def disconnect_corelogic_to_property(self, property_id, raw=False):
        return self.connect_corelogic_to_property(
            property_id, False, raw=True)

    @rex_result()
    def get_corelogic_address_suggestion(self, address):
        id_ = self.get_third_party_connection_id('corelogic')
        if not id_:
            return None

        data = {'connection_id': id_,
                'search_type': 'exact_address', 'search': address}

        return self.client.request(
            'ThirdPartyServiceCoreLogicSearch::getSuggestion', data)
