from .base import BaseApi, BaseModel, rex_result
from pyrex.api import notes


class Property(BaseModel):
    def __init__(
        self,
        unit_number: int = None,
        street_number: int = None,
        street_name: str = None,
        suburb: str = None,
        state: str = None,
        postcode: str = None,
        property_category: str = "residential",
    ):

        self.unit_number = unit_number
        self.street_number = street_number
        self.street_name = street_name
        self.suburb = suburb
        self.state = state
        self.postcode = postcode
        self.property_category = property_category

    def rex_format(self):
        return {
            "data": {
                "adr_unit_number": self.unit_number,
                "adr_street_number": self.street_number,
                "adr_street_name": self.street_name,
                "adr_suburb_or_town": self.suburb,
                "adr_state_or_region": self.state,
                "adr_postcode": self.postcode,
                "property_category_id": self.property_category,
            }
        }


class PropertiesApi(BaseApi):
    def __init__(self, client):
        self.notes_api = notes.NotesApi(client)
        super().__init__(client)

    @rex_result()
    def create(self, property_, raw=False, execute=True):
        return ('Properties::create', property_.rex_format())

    @rex_result()
    def delete(self, property_id, raw=False, execute=True):
        data = {'id': property_id}
        return ('Properties::trash', data)

    @rex_result()
    def get(self, property_id, raw=False, execute=True):
        data = {'id': property_id}
        return ('Properties::read', data)

    @rex_result()
    def transfer_ownership(self, property_id, owner_id, raw=False, execute=True):
        data = {
            "object_type": "properties",
            "object_id": property_id,
            "new_owner_id": owner_id,
        }
        return ('SecurityObjectPermissions::transferObjectOwnershipToUser', data)

    @rex_result
    def get_notes(self, property_id, raw=False, execute=True):
        return self.notes_api.get(
            'Properties', property_id, raw=True, execute=False)

    def get_property_id(self, address):
        """
        get Property by passing  address,it returns property id
        if address is unique and aleredy exists.
        else it will return error
         :param address:full adddress of the property
        :type address:str
        :rtype : int
        """

        data = {"search_string": str(address), "limit": 1}
        properties = self.client.request("Properties::autocomplete", data)
        if(properties['result'] != None):
            return properties["result"][0]["_id"]
        return None

    @rex_result
    def create_note(self,
                    property_id,
                    note,
                    updated_last_contacted=True,
                    raw=False,
                    execute=True):

        return self.notes_api.create(
            "property",
            property_id,
            note,
            updated_last_contacted=updated_last_contacted,
            raw=True,
            execute=False
        )
