from .base import BaseApi, rex_result


class UsersApi(BaseApi):
    @rex_result()
    def get_permission_groups(self, limit=100, raw=False):
        data = {"limit": limit}
        return self.client.request("SecurityPermissionGroups::search", data)

    @rex_result()
    def get_user_group(self, group_id, raw=False):
        data = {"id": group_id}
        return self.client.request("AdminUserGroups::read", data)

    def get_location_id(self):
        """
        fetch  default location id  of logged in user
        """
        user_info = self.get_logged_in_user_info()
        return user_info["settings"]["default_location"]["id"]

    @rex_result()
    def get_logged_in_user_info(self):
        """
        it will return logged in user info like user_id, names, email,
        location,calander link,settings etc
        """
        return self.client.request_beta("UserProfile::read", None)

    def get_agent_name(self, agent_id):
        """
        by using agent id we are fetching agent name

        :type agent_id:int
        :param agent_id: agent id
        """
        agent_details = self.get_all_account_users()
        if agent_id is not None:
            for i in agent_details:
                if i["id"] == str(agent_id):
                    return i["text"]
        return None

    @rex_result()
    def get_all_account_users(self):
        """
        It will give all the agents name and id,returns list of agents
        """
        data = '{"list_name":"account_users"}'
        return self.client.request_beta("SystemValues::getCategoryValues", data)

    def get_agent_id_by_email(self, email_address):
        """
        by using agent's email_address we are fetching agent name
        :type email_address:string
        :param email_address: email_address
        """
        account_users = self.read_all_account_users()
        for account_user in account_users:
            if account_user["email"] == email_address:
                return account_user["_id"]
        return None

    @rex_result()
    def getAccountSettings(self):
        data = {"requests": [{"method": "AccountSettings::read"}]}
        return self.client.request_beta("BatchRequests::execute", data)

    @rex_result()
    def read_all_account_users(self, limit=None):
        """
        returns all account users
        """
        data = {"limit": limit}
        return self.client.request_beta("AccountUsers::search", data)

    @rex_result()
    def create_account_user(self, email, first_name, last_name=None, send_invite=True):
        try:
            return {
                "result": {
                    "id": self.account_user_invite(email)["result"],
                    "error": None,
                }
            }
        except:
            try:
                data = {
                    "email_address": email,
                    "first_name": first_name,
                    "last_name": last_name,
                    "send_invite": send_invite,
                }
                return {
                    "result": {
                        "id": self.client.request_beta("AccountUsers::create", data)[
                            "result"
                        ],
                        "error": None,
                    }
                }
            except Exception as ex:
                return {"result": {"error": ex}}

    # @rex_result()
    def account_user_invite(self, email):
        return self.client.request_beta(
            "AccountUsers::invite", {"email_address": email}
        )

    def get_office_id(self,new_office_name:str):
        """getting the office id(type:int) by providing office name(type:string)"""
        data = {"requests":[{"method":"UserProfile::getAccessibleAccounts"}]}
        response=self.client.request_beta("BatchRequests::execute", data)
        for office in response['result'][0]:
            if office['name'].upper()==new_office_name.upper():
                return office['account_id']
        return None


