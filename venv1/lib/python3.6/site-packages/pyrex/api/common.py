from .base import BaseApi, rex_result
from datetime import datetime
from pyrex.api import contacts


authority_mapping = {
    "Auction": "auction",
    "Private treaty": "exclusive",
    "Expression of interest": None,
    "Tender": None,
}


subcategories = {
    "house": {"subcategory_id": "455", "rex_subcategory_type": "House"},
    "acreage": {"subcategory_id": "465", "rex_subcategory_type": "AcreageSemi-rural"},
    "studio": {"subcategory_id": "461", "rex_subcategory_type": "Studio"},
    "townhouse": {"subcategory_id": "457", "rex_subcategory_type": "Townhouse"},
    "unit": {"subcategory_id": "459", "rex_subcategory_type": "Apartment"},
    "villa": {"subcategory_id": "458", "rex_subcategory_type": "Villa"},
    "other": {"subcategory_id": "470", "rex_subcategory_type": "Other"},
}

property_feature_mapping = {
    "solarHotWater": {
        "rex_feature_id": "solarHotWater",
        "rex_feature_name": "Solar Hot Water",
    },
    "greyWaterSystem": {
        "rex_feature_id": "greyWaterSystem",
        "rex_feature_name": "Grey Water System",
    },
    "waterTank": {"rex_feature_id": "waterTank", "rex_feature_name": "Water Tank"},
    "solarPanels": {
        "rex_feature_id": "solarPanels",
        "rex_feature_name": "Solar Panels",
    },
    "evaporativeCooling": {
        "rex_feature_id": "evaporativeCooling",
        "rex_feature_name": "Evaporative Cooling",
    },
    "ductedCooling": {
        "rex_feature_id": "ductedCooling",
        "rex_feature_name": "Ducted Cooling",
    },
    "ductedHeating": {
        "rex_feature_id": "ductedHeating",
        "rex_feature_name": "Ducted Heating",
    },
    "reverseCycleAc": {
        "rex_feature_id": "reverseCycleAirCon",
        "rex_feature_name": "Reverse Cycle Aircon",
    },
    "courtyard": {"rex_feature_id": "courtyard", "rex_feature_name": "Courtyard"},
    "deck": {"rex_feature_id": "deck", "rex_feature_name": "Deck"},
    "remoteGarageDoor": {
        "rex_feature_id": "remoteGarage",
        "rex_feature_name": "Remote Garage",
    },
    "secureParking": {
        "rex_feature_id": "secureParking",
        "rex_feature_name": "Secure Parking",
    },
    "ingroundPool": {
        "rex_feature_id": "poolInGround",
        "rex_feature_name": "Pool - Inground",
    },
    "outsideEntertainingArea": {
        "rex_feature_id": "outdoorEnt",
        "rex_feature_name": "Outdoor Entertaining",
    },
    "shed": {"rex_feature_id": "shed", "rex_feature_name": "Shed"},
    "builtInRobes": {
        "rex_feature_id": "builtInRobes",
        "rex_feature_name": "Built In Robes",
    },
    "hotWaterService": {
        "rex_feature_id": "hotWaterService_elec",
        "rex_feature_name": "Electric Hot Water Service",
    },
    "intercom": {"rex_feature_id": "intercom", "rex_feature_name": "Intercom"},
    "ductedVacuumSystem": {
        "rex_feature_id": "greyWaterSystem",
        "rex_feature_name": "Grey Water System",
    },
    "payTvAccess": {"rex_feature_id": "payTV", "rex_feature_name": "Pay TV"},
    "airConditioning": {
        "rex_feature_id": "airConditioning",
        "rex_feature_name": "Air Conditioning",
    },
    "gasHeating": {"rex_feature_id": "gasHeating", "rex_feature_name": "Gas Heating"},
    "hydronicHeating": {
        "rex_feature_id": "hydronicHeating",
        "rex_feature_name": "Hydronic Heating",
    },
    "splitSystemHeating": {
        "rex_feature_id": "splitSystemHeating",
        "rex_feature_name": "Split System Heating",
    },
    "splitSystemAc": {
        "rex_feature_id": "splitSystemAirCon",
        "rex_feature_name": "Split System Aircon",
    },
    "balcony": {"rex_feature_id": "balcony", "rex_feature_name": "Balcony"},
    "fullyFenced": {
        "rex_feature_id": "fullyFenced",
        "rex_feature_name": "Fully Fenced",
    },
    "outsideSpa": {"rex_feature_id": "outsideSpa", "rex_feature_name": "Spa - Outside"},
    "tennisCourt": {
        "rex_feature_id": "tennisCourt",
        "rex_feature_name": "Tennis Court",
    },
    "aboveTheGroundPool": {
        "rex_feature_id": "poolAboveGround",
        "rex_feature_name": "Pool - Above Ground",
    },
    "rumpusRoom": {"rex_feature_id": "rumpusRoom", "rex_feature_name": "Rumpus Room"},
    "study": {"rex_feature_id": "study", "rex_feature_name": "Study"},
    "alarmSystem": {
        "rex_feature_id": "alarmSystem",
        "rex_feature_name": "Alarm System",
    },
    "floorboards": {"rex_feature_id": "floorboards", "rex_feature_name": "Floorboards"},
    "dishwasher": {"rex_feature_id": "dishwasher", "rex_feature_name": "Dishwasher"},
    "insideSpa": {"rex_feature_id": "insideSpa", "rex_feature_name": "Spa - Inside"},
    "openFireplace": {
        "rex_feature_id": "openFirePlace",
        "rex_feature_name": "Open Fire Place",
    },
    "gym": {"rex_feature_id": "gym", "rex_feature_name": "Gym"},
}


def get_minutes(start_time, end_time):
    """
    this method will give  diff bw the star time, end time in minutes

    :type star_time: time 1(HH:mm:ss)
    :type end_time: time 2(HH:mm:ss)
    """
    duration = datetime.strptime(end_time, "%H:%M:%S") - datetime.strptime(
        start_time, "%H:%M:%S"
    )
    minutes = int(duration.total_seconds() / 60)
    return minutes


def get_duration_days(start_day, end_day):
    date1 = datetime.strptime(start_day, "%Y-%m-%d")
    date2 = datetime.strptime(end_day, "%Y-%m-%d")
    return (date2 - date1).days


def prepare_feature_list(feature_name_list):
    feature_list = []
    for feature_name in feature_name_list:
        if feature_name in property_feature_mapping.keys():
            feature_list.append(
                {
                    "feature_id": property_feature_mapping[feature_name][
                        "rex_feature_id"
                    ],
                    "_feature_name": property_feature_mapping[feature_name][
                        "rex_feature_name"
                    ],
                }
            )

    return feature_list


def prepare_ofi_feedback_data(data, _date, starttime, endtime):
    data["data"]["date_of"] = _date
    data["data"]["date_time_start"] = starttime
    data["data"]["date_time_finish"] = endtime
    return data


def prepare_inspection_feedback_data(
    data, amount_of, enquiry_source_label, interest_level
):
    enquiry_source_label_mapping = [
        {"id": "191", "text": "Billboard"},
        {"id": "204", "text": "Board"},
        {"id": "205", "text": "Business Card Drop"},
        {"id": "190", "text": "Bus Stop"},
        {"id": "203", "text": "Direct Mail"},
        {"id": "202", "text": "Door Knocking"},
        {"id": "201", "text": "Flyer"},
        {"id": "189", "text": "Internet (Our Website)"},
        {"id": "200", "text": "Internet (Portal)"},
        {"id": "199", "text": "Newspaper"},
        {"id": "198", "text": "Open Home"},
        {"id": "197", "text": "Other"},
        {"id": "195", "text": "Past Client"},
        {"id": "194", "text": "Radio"},
        {"id": "196", "text": "Referral"},
        {"id": "193", "text": "Telemarketing"},
        {"id": "192", "text": "Window"},
    ]

    if amount_of != None:
        data["data"]["amount_of"] = amount_of
    if enquiry_source_label != None:
        for enquiry_source in enquiry_source_label_mapping:
            if enquiry_source["text"].upper() == enquiry_source_label.upper():
                _id = enquiry_source["id"]
                data["data"]["enquiry_source"] = {"id": _id}

    if interest_level != None:
        data["data"]["interest_level"] = {"id": interest_level.lower()}
    return data

