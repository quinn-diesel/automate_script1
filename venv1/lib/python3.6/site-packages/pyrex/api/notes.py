from .base import BaseApi, rex_result
from pyrex.api import contacts, common


class NotesApi(BaseApi):
    @rex_result()
    def get(self, service_name, id, raw=False, execute=True):
        data = {
            "service_name": service_name,
            "record_id": id,
            "source_services": None,
            "direction": "normal",
            "last_post": None,
            "options": None,
        }

        return ('RecordStream::getRecordStream', data)

    @rex_result()
    def create(self,
               record_type,
               record_id,
               note,
               updated_last_contacted=True,
               raw=False,
               execute=True):

        assert record_type in ("property", "contact")

        if record_type == "property":
            details = {"note_properties": [{"property_id": record_id}]}
        elif record_type == "contact":
            details = {"note_contacts": [{"contact_id": record_id}]}

        data = {
            "data": {
                "note": note,
                "_related": details,
                "note_type_id": "note",
                "update_last_contacted": updated_last_contacted,
            }
        }
        return self.client.request_beta("Notes::create", data)

    @rex_result()
    def create_listing_note(self, property_id, contact_id, note, raw=False):

        details = {
            "note_properties": [{"property_id": property_id}],
            "note_contacts": [{"contact_id": contact_id}],
        }

        data = {
            "data": {
                "note": note,
                "_related": details,
                "note_type_id": "note",
                "update_last_contacted": True,
            }
        }

        return ('Notes::create', data)
