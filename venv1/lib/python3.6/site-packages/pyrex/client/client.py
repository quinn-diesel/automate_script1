import json

import requests

PROD_BASE_URL = "https://api.rexsoftware.com"


class DuplicateRecordException(Exception):
    def __init__(self, message, duplicate_id):
        self.message = message
        self.duplicate_id = duplicate_id


class RexClient:
    """Rex client"""

    __headers = {
        "Origin": "https://app.rexsoftware.com",
        "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) "
        "AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36",
        "Content-Type": "application/json",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "x-api-option": "use_status_codes=true,add_request_prefixes=true,"
        + "use_strict_arguments=false,strip_response_prefixes=false",
        "Connection": "keep-alive",
    }

    __token = ""

    def __init__(self, username, password):
        self.__url = PROD_BASE_URL
        self.__token = self.__login(username, password)

    def __login(self, username, password):
        data = {
            "email": username,
            "password": password,
            "token_lifetime": 3600,
            "application": "rex",
            "force_thirdparty_login": "true",
        }

        result = self.request("Authentication::login", data)
        return result["result"]

    def __login_with_token(self, token, account_id, lifetime):
        result = self.request('Authentication::loginWithGlobalAuthToken', {
            'account_id': account_id,
            'token': token,
            'token_lifetime': lifetime
        })
        return result['result']

    def _process_response(self, response):
        result = response.json()

        if 200 <= response.status_code < 400:
            return result
        error = result.get("error", {})

        if error.get("type") == "DuplicateRecordException":
            raise DuplicateRecordException(
                error["message"], error.get("extra", {}).get("duplicate_id")
            )

        raise ValueError(json.dumps((result.get("error"))))

    def switch_account(self, account_id, lifetime=10800):
        result = self.request('UserProfile::getGlobalAuthToken', {})
        token = result['result']['token']
        self.__token = self.__login_with_token(token, account_id, lifetime)
        return self

    def request_beta(self, method, data):

        headers = self.__headers.copy()
        headers["authorization"] = f"Bearer {self.__token}"

        data = json.dumps(data)
        response = requests.post(
            "{}/v1/rex/{}".format(self.__url, method), headers=headers, data=data
        )
        return self._process_response(response)

    def request_(self, method, data, file_name):
        headers = self.__headers.copy()
        headers["authorization"] = f"Bearer {self.__token}"
        headers["Content-Type"] = None
        file_ = {"file": (file_name, data)}
        response = requests.post(
            "{}/v1/rex/{}".format(self.__url, method), headers=headers, files=file_
        )

        return self._process_response(response)

    def request(self, method, args):

        headers = self.__headers.copy()
        headers["Content-Type"] = "application/x-www-form-urlencoded"

        data = [
            ("method", method),
            ("args", json.dumps(args)),
            ("token", self.__token),
            ("use_status_codes", "true"),
        ]

        response = requests.post(
            "{}/rex.php".format(self.__url), headers=headers, data=data
        )
        return self._process_response(response)
