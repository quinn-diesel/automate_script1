import os

from elasticsearch import exceptions

from pycommon.aws import dynamo_item_to_dict
from pycommon.es import get_es_client


_es = None


def _make_key(image):
    '''Extract keys from dynamodb image'''
    keys_dict = image['Keys']
    return '_'.join([list(keys_dict[k].values())[0] for k in sorted(keys_dict.keys())])


def stream_handler(event, context, index_name, on_insert_fn=None):
    """Listens to dyamodb streams and syncs data with elasticsearch"""
    global _es
    if _es is None:
        _es = get_es_client()

    records = event.get('Records')
    if not records:
        raise ValueError('not a valid stream record')

    for record in records:
        event_name = record.get('eventName')

        item = record.get('dynamodb')
        if not item:
            raise ValueError('Not a valid dynamodb record')

        if event_name == 'INSERT' or event_name == 'MODIFY':
            new_image = item.get('NewImage')

            if not new_image:
                return

            new_item = dynamo_item_to_dict(new_image)
            if on_insert_fn:
                new_item = on_insert_fn(new_item)

            _es.index(index=index_name,
                      doc_type='_doc', id=_make_key(item), body=new_item)

        if event_name == 'REMOVE':
            old_image = item.get('OldImage')
            if not old_image:
                return

            try:
                _es.delete(index=index_name,
                           doc_type='_doc', id=_make_key(item))
            except exceptions.NotFoundError:
                pass
