import os

from pynamodb.models import Model
from pynamodb.attributes import (
    UnicodeAttribute,
    UTCDateTimeAttribute,
    MapAttribute,
    ListAttribute,
    NumberAttribute,
    BooleanAttribute
)
from dateutil import parser

from pycommon.dates import to_mills


class BaseMeta(object):
    region = os.getenv('AWS_REGION')


class BaseModel(Model):
    def __iter__(self):
        for name, attr in self.get_attributes().items():
            if getattr(self, name) is None:
                yield name, None
            elif isinstance(attr, MapAttribute):
                yield name, getattr(self, name).as_dict()
            elif isinstance(attr, NumberAttribute):
                value = attr.serialize(getattr(self, name))
                try:
                    yield name, int(value)
                except ValueError:
                    yield name, float(value)
            elif isinstance(attr, ListAttribute):
                yield name, [el.as_dict() if hasattr(el, 'as_dict') else el for el in getattr(self, name)]
            elif isinstance(attr, UTCDateTimeAttribute):
                yield name, to_mills(getattr(self, name))
            else:
                yield name, attr.serialize(getattr(self, name))

    def scan_list(self, **kwargs):
        results = super().scan(**kwargs)
        return [dict(result) for result in results]

    def from_dict(self, values):
        attributes = self.get_attributes()
        for key, value in values.items():
            if isinstance(attributes[key], UTCDateTimeAttribute):
                value = parser.parse(value)
            setattr(self, key, value)
        return self
